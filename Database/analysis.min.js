let temp,jsonFilePath;
let com,stdSchema,teaSchema,libSchema,bookSchema,brrSchema,instSchema,settingSchema;
function setLocalData(){
    jsonFilePath = './Database/localData.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        com = temp;
    }).catch(err => console.log("Error to fetching local data \n",err));
}
function setStudentSchema(){
    jsonFilePath = './Database/studentSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        stdSchema = temp;
    }).catch(err => console.log("Error to fetching student schema \n",err));
}
function setTeacherSchema(){
    jsonFilePath = './Database/teacherSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        teaSchema = temp;
    }).catch(err => console.log("Error to fetching teacher schema \n",err));
}
function setBookSchema(){
    jsonFilePath = './Database/bookSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        bookSchema = temp;
    }).catch(err => console.log("Error to fetching book schema \n",err));
}
function setBorrowSchema(){
    jsonFilePath = './Database/borrowSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        brrSchema = temp;
    }).catch(err => console.log("Error to fetching borrow schema \n",err));
}
function setLibrarianSchema(){
    jsonFilePath = './Database/librarianSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        libSchema = temp;
    }).catch(err => console.log("Error to fetching librarian schema \n",err));
}
function setInstSchema(){
    jsonFilePath = './Database/instSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        instSchema = temp;
    }).catch(err => console.log("Error to fetching institute schema \n",err));
}
function setSettingSchema(){
    jsonFilePath = './Database/settingSchema.json';
    fetch(jsonFilePath)
    .then(response => {
        if(!response.ok){
            throw new Error('Net response not ok!');
        }
        return response.json();
    })
    .then(temp => {
        settingSchema = temp;
    }).catch(err => console.log("Error to fetching setting schema \n",err));
}
function getLocalData(id){
    setLocalData();
    let bd = document.getElementById(id);
    setTimeout(()=>{
        try{
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.name}}',com.name);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.owner}}',com.owner);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.founder}}',com.founder);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.recovery-path}}',com.recoveryPath);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.version}}',com.AboutSoftware.version);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.update}}',com.AboutSoftware.update);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.description}}',com.AboutSoftware.Description);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.facebook}}',com.Socials.facebook);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.youtube}}',com.Socials.youtube);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.github}}',com.Socials.github);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.linkedin}}',com.Socials.linkedin);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.instagram}}',com.Socials.instagram);
            bd.innerHTML = bd.innerHTML.replaceAll('{{com.email}}',com.email);
        }catch(e){
            console.log("ImplementaionError: Data fetch not possible in frontend side!");
            voiceOver("Sorry, I am not able to get local data now, due to some error");
        }
    },1000);
}
function validateAdminEntry(name,gender,email,position,year,color,password){
    if(validateUserName(name)&&validateUserEmail(email)&&validateDepartment(position)){
        if(libSchema!=undefined){
            libSchema.name = name;
            libSchema.gender = gender;
            libSchema.email = email;
            libSchema.position = position;
            libSchema.year = year;
            libSchema.color = color;
            libSchema.password = password;
            return pushLibrarianData(libSchema);
        }else{
            setTimeout(()=>{
                setLibrarianSchema();
                validateAdminEntry(name,gender,email,position,year,color,password);
            },100);
        }
    }else{
        voiceOver("Given account details is not correct, please fill them accroding the grammer.");
        return false;
    }
}
function pushLibrarianData(data){
    try{
        data.userid = idMaker(3);
        data.dp = avaterMaker(data.gender);
        adminBin.length += 1;
        if(adminBin.length<=0){
            data.roll = "Super Admin";
        }else{
            data.roll = "Admin";
        }
        adminBin[adminBin.length-1] = data;
        return pushData();
    }catch(e){
        console.log("New Account push not possible due to an error\n",e);
        return false;
    }
}
function validateStudentEntry(name,roll,department,email,classes,gender,year){
    if(adminBin.length!=0){
        if(validateUserName(name)&&validateUserEmail(email)&&validateDepartment(department)){
            if(stdSchema!=undefined){
                stdSchema.name = name;
                stdSchema.gender = gender;
                stdSchema.email = email;
                stdSchema.department = department;
                stdSchema.year = year;
                stdSchema.classes = classes;
                stdSchema.roll = roll;
                return pushStudentData(stdSchema);
            }else{
                setTimeout(()=>{
                    setStudentSchema();
                    validateStudentEntry(name,roll,department,email,classes,gender,year);
                },100);
            }
        }else{
            voiceOver("Given account details is not correct, please fill them accroding the grammer.");
            return false;
        }
    }else{
        defaultSout();
        return false;
    }
}
function pushStudentData(data){
    try{
        data.userid = idMaker(1);
        studentBin.length += 1;
        studentBin[studentBin.length-1] = data;
        return pushData();
    }catch(e){
        console.log("New Account push not possible due to an error\n",e);
        return false;
    }
}
function validateTeacherEntry(name,position,department,email,gender,year){
    if(adminBin.length!=0){
        if(validateUserName(name)&&validateUserEmail(email)&&validateDepartment(department)){
            if(teaSchema!=undefined){
                teaSchema.name = name;
                teaSchema.gender = gender;
                teaSchema.email = email;
                teaSchema.department = department;
                teaSchema.year = year;
                teaSchema.position = position;
                return pushTeacherData(teaSchema);
            }else{
                setTimeout(()=>{
                    setTeacherSchema();
                    validateTeacherEntry(name,position,department,email,gender,year);
                },100);
            }
        }else{
            voiceOver("Given account details is not correct, please fill them accroding the grammer.");
            return false;
        }
    }else{
        defaultSout();
        return false;
    }
}
function pushTeacherData(data){
    try{
        data.userid = idMaker(2);
        teacherBin.length += 1;
        teacherBin[teacherBin.length-1] = data;
        return pushData();
    }catch(e){
        console.log("New Account push not possible due to an error\n",e);
        return false;
    }
}
function validateInstituteEntry(name,brunch,address,email,year){
    if(adminBin.length!=0){
        if(validateDepartment(name)&&validateUserEmail(email)){
            if(instSchema!=undefined){
                instSchema.name = name;
                instSchema.brunch = brunch;
                instSchema.email = email;
                instSchema.address = address;
                instSchema.year = year;
                return pushInstituteData(instSchema);
            }else{
                setTimeout(()=>{
                    setInstSchema();
                    validateInstituteEntry(name,brunch,address,email,year);
                },100);
            }
        }else{
            voiceOver("Given institute details is not correct, please fill them accroding the grammer.");
            return false;
        }
    }else{
        defaultSout();
        return false;
    }
}
function pushInstituteData(data){
    try{
        instBin.length = 1;
        instBin[0] = data;
        return pushData();
    }catch(e){
        console.log("Institute details push not possible due to an error\n",e);
        return false;
    }
}
function validateSettingEntry(list){
    if(adminBin.length!=0){
        if(settingSchema!=undefined){
            settingSchema.theme = list[0];
            settingSchema.voice = list[1];
            settingSchema.fine = list[2];
            settingSchema.superAdmin = list[3];
            settingSchema.backup = list[4];
            settingSchema.space = list[5];
            return pushSettingData(instSchema);
        }else{
            setTimeout(()=>{
                setSettingSchema();
                validateSettingEntry(list);
            },100);
        }
    }else{
        defaultSout();
        return false;
    }
}
function defaultSout(){
    voiceOver("No admin is present to enter this data, how can you do, are you a tech person or not, i think i need to call police..");
    voiceOver("Help, help, somebody help me, i am hacked, help, help me.");
}
function pushSettingData(data){
    try{
        settingBin.length = 1;
        settingBin[0] = data;
        return pushData();
    }catch(e){
        console.log("Setting details push not possible due to an error\n",e);
        return false;
    }
}